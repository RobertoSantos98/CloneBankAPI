// <auto-generated />
using System;
using CloneBankAPI.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CloneBankAPI.Migrations
{
    [DbContext(typeof(DbConnection))]
    [Migration("20250709192243_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CloneBankAPI.Domain.Models.Conta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApelidoConta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TipoConta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Contas");
                });

            modelBuilder.Entity("CloneBankAPI.Domain.Models.Transferencia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataTransferencia")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdPagador")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdRecebedor")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdPagador");

                    b.HasIndex("IdRecebedor");

                    b.ToTable("Transferencias");
                });

            modelBuilder.Entity("CloneBankAPI.Domain.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHashed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("CloneBankAPI.Domain.Models.Conta", b =>
                {
                    b.HasOne("CloneBankAPI.Domain.Models.Usuario", "Usuario")
                        .WithMany("Contas")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Conta_Usuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CloneBankAPI.Domain.Models.Transferencia", b =>
                {
                    b.HasOne("CloneBankAPI.Domain.Models.Conta", "Pagador")
                        .WithMany()
                        .HasForeignKey("IdPagador")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Transferencia_Pagador");

                    b.HasOne("CloneBankAPI.Domain.Models.Conta", "Recebedor")
                        .WithMany()
                        .HasForeignKey("IdRecebedor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Transferencia_Recebedor");

                    b.Navigation("Pagador");

                    b.Navigation("Recebedor");
                });

            modelBuilder.Entity("CloneBankAPI.Domain.Models.Usuario", b =>
                {
                    b.Navigation("Contas");
                });
#pragma warning restore 612, 618
        }
    }
}
